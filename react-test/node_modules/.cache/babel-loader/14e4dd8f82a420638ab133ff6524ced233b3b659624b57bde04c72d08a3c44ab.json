{"ast":null,"code":"var _s = $RefreshSig$();\n// useAuth.js\nimport { useState, useEffect } from 'react';\nconst TOKEN_KEY = 'token';\nexport const useAuth = () => {\n  _s();\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Check if a token is stored in local storage\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (token) {\n      // Decode the token and set the user information\n      const decodedToken = decodeToken(token);\n      setUser(decodedToken);\n      setLoggedIn(true);\n    }\n  }, []);\n  const decodeToken = token => {\n    // Perform decoding logic here\n    // Example: For simplicity, assuming the token is a base64-encoded JSON\n    const decodedString = atob(token.split('.')[1]);\n    return JSON.parse(decodedString);\n  };\n  const login = token => {\n    // Decode the token and set the user information\n    const decodedToken = decodeToken(token);\n    setUser(decodedToken);\n    localStorage.setItem(TOKEN_KEY, token);\n    setLoggedIn(true);\n  };\n  const logout = () => {\n    localStorage.removeItem(TOKEN_KEY);\n    setUser(null);\n    setLoggedIn(false);\n  };\n  return {\n    isLoggedIn,\n    user,\n    login,\n    logout\n  };\n};\n_s(useAuth, \"lVrz6wBaFciqpuEg1R91HjjqjtU=\");","map":{"version":3,"names":["useState","useEffect","TOKEN_KEY","useAuth","_s","isLoggedIn","setLoggedIn","user","setUser","token","localStorage","getItem","decodedToken","decodeToken","decodedString","atob","split","JSON","parse","login","setItem","logout","removeItem"],"sources":["C:/Users/kpfb2/repositories/RecruitApp/react-test/src/hooks/useAuth.js"],"sourcesContent":["// useAuth.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst TOKEN_KEY = 'token';\r\n\r\nexport const useAuth = () => {\r\n  const [isLoggedIn, setLoggedIn] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check if a token is stored in local storage\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (token) {\r\n      // Decode the token and set the user information\r\n      const decodedToken = decodeToken(token);\r\n      setUser(decodedToken);\r\n      setLoggedIn(true);\r\n    }\r\n  }, []);\r\n\r\n  const decodeToken = (token) => {\r\n    // Perform decoding logic here\r\n    // Example: For simplicity, assuming the token is a base64-encoded JSON\r\n    const decodedString = atob(token.split('.')[1]);\r\n    return JSON.parse(decodedString);\r\n  };\r\n\r\n  const login = (token) => {\r\n    // Decode the token and set the user information\r\n    const decodedToken = decodeToken(token);\r\n    setUser(decodedToken);\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    setLoggedIn(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    setUser(null);\r\n    setLoggedIn(false);\r\n  };\r\n\r\n  return {\r\n    isLoggedIn,\r\n    user,\r\n    login,\r\n    logout,\r\n  };\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,SAAS,GAAG,OAAO;AAEzB,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACT,SAAS,CAAC;IAC7C,IAAIO,KAAK,EAAE;MACT;MACA,MAAMG,YAAY,GAAGC,WAAW,CAACJ,KAAK,CAAC;MACvCD,OAAO,CAACI,YAAY,CAAC;MACrBN,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,WAAW,GAAIJ,KAAK,IAAK;IAC7B;IACA;IACA,MAAMK,aAAa,GAAGC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,OAAOC,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC;EAClC,CAAC;EAED,MAAMK,KAAK,GAAIV,KAAK,IAAK;IACvB;IACA,MAAMG,YAAY,GAAGC,WAAW,CAACJ,KAAK,CAAC;IACvCD,OAAO,CAACI,YAAY,CAAC;IACrBF,YAAY,CAACU,OAAO,CAAClB,SAAS,EAAEO,KAAK,CAAC;IACtCH,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMe,MAAM,GAAGA,CAAA,KAAM;IACnBX,YAAY,CAACY,UAAU,CAACpB,SAAS,CAAC;IAClCM,OAAO,CAAC,IAAI,CAAC;IACbF,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,OAAO;IACLD,UAAU;IACVE,IAAI;IACJY,KAAK;IACLE;EACF,CAAC;AACH,CAAC;AAACjB,EAAA,CA1CWD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}