{"ast":null,"code":"// import React, { useCallback, useState } from 'react';\n// import { useDropzone } from 'react-dropzone';\n\n// const MediaUpload = () => {\n//   const [acceptedFiles, setAcceptedFiles] = useState([]);\n\n//   // Callback to handle when files are dropped\n//   const onDrop = useCallback((files) => {\n//     // Handle the uploaded files\n//     console.log('Accepted Files:', files);\n//     setAcceptedFiles(files);\n//     // You can perform additional actions like uploading to a server or storing in state\n//   }, []);\n\n//   // Initialize the dropzone\n//   const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n//   // Log when the component renders\n//   console.log('MediaUpload Component Rendered');\n\n//   return (\n//     <div>\n//       <h1>Welcome to Media Upload Page</h1>\n//       {/* Dropzone area */}\n//       <div {...getRootProps()} style={dropzoneStyle}>\n//         <input {...getInputProps()} />\n//         {isDragActive ? (\n//           <p>Drop the files here ...</p>\n//         ) : (\n//           <p>Drag 'n' drop some files here, or click to select files</p>\n//         )}\n//       </div>\n//       {/* Display the accepted files */}\n//       {acceptedFiles.length > 0 && (\n//         <div>\n//           <h2>Accepted Files:</h2>\n//           <ul>\n//             {acceptedFiles.map((file) => (\n//               <li key={file.name}>{file.name}</li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// // Styling for the dropzone area\n// const dropzoneStyle = {\n//   border: '2px dashed #cccccc',\n//   borderRadius: '4px',\n//   padding: '20px',\n//   textAlign: 'center',\n//   cursor: 'pointer',\n//   margin: '20px 0',\n// };\n\n// export default MediaUpload;","map":{"version":3,"names":[],"sources":["C:/Users/kpfb2/repositories/RecruitApp/react-test/src/Pages/MediaUpload.js"],"sourcesContent":["// import React, { useCallback, useState } from 'react';\r\n// import { useDropzone } from 'react-dropzone';\r\n\r\n// const MediaUpload = () => {\r\n//   const [acceptedFiles, setAcceptedFiles] = useState([]);\r\n\r\n//   // Callback to handle when files are dropped\r\n//   const onDrop = useCallback((files) => {\r\n//     // Handle the uploaded files\r\n//     console.log('Accepted Files:', files);\r\n//     setAcceptedFiles(files);\r\n//     // You can perform additional actions like uploading to a server or storing in state\r\n//   }, []);\r\n\r\n//   // Initialize the dropzone\r\n//   const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n//   // Log when the component renders\r\n//   console.log('MediaUpload Component Rendered');\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Welcome to Media Upload Page</h1>\r\n//       {/* Dropzone area */}\r\n//       <div {...getRootProps()} style={dropzoneStyle}>\r\n//         <input {...getInputProps()} />\r\n//         {isDragActive ? (\r\n//           <p>Drop the files here ...</p>\r\n//         ) : (\r\n//           <p>Drag 'n' drop some files here, or click to select files</p>\r\n//         )}\r\n//       </div>\r\n//       {/* Display the accepted files */}\r\n//       {acceptedFiles.length > 0 && (\r\n//         <div>\r\n//           <h2>Accepted Files:</h2>\r\n//           <ul>\r\n//             {acceptedFiles.map((file) => (\r\n//               <li key={file.name}>{file.name}</li>\r\n//             ))}\r\n//           </ul>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // Styling for the dropzone area\r\n// const dropzoneStyle = {\r\n//   border: '2px dashed #cccccc',\r\n//   borderRadius: '4px',\r\n//   padding: '20px',\r\n//   textAlign: 'center',\r\n//   cursor: 'pointer',\r\n//   margin: '20px 0',\r\n// };\r\n\r\n// export default MediaUpload;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}