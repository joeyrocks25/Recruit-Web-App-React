{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kpfb2\\\\repositories\\\\RecruitApp\\\\react-test\\\\src\\\\Pages\\\\MyResume.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport { useAuth } from '../hooks/useAuth';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuidv4 from the 'uuid' library\n\n// MyResume component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyResume = () => {\n  _s();\n  // Use the useAuth hook to get the user object\n  const {\n    user\n  } = useAuth();\n  const [mediaFile, setMediaFile] = useState(null);\n\n  // Callback to handle when files are dropped\n  const onDrop = useCallback(async files => {\n    // Generate a UUID for the entire upload session\n    const mediaID = uuidv4();\n\n    // Find the first PDF or MP4 file\n    const supportedFile = files.find(file => getFileType(file) === 'pdf' || getFileType(file) === 'video');\n\n    // Handle the uploaded file\n    console.log('Accepted File:', supportedFile);\n\n    // Set state if a supported file is found\n    if (supportedFile) {\n      setMediaFile(supportedFile); // Assuming only one supported file is allowed\n    }\n\n    // Use the user ID obtained from the useAuth hook\n    const userId = user ? user.id : null;\n\n    // Make a POST request to the Azure Functions endpoint if user ID is available and a supported file is found\n    if (userId && supportedFile) {\n      // Pass the generated UUID to the function\n      uploadFiles(userId, mediaID, supportedFile);\n    }\n  }, [user]);\n\n  // Function to get file type based on extension\n  const getFileType = file => {\n    const extensions = {\n      pdf: ['pdf'],\n      video: ['mp4', 'mov'],\n      audio: ['mp3', 'wav']\n    };\n    const extension = file.name.split('.').pop();\n    for (const type in extensions) {\n      if (extensions[type].includes(extension)) {\n        return type;\n      }\n    }\n    return 'unknown';\n  };\n\n  // Function to read file content as base64\n  const readFileContent = async file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const base64Content = event.target.result.split(',')[1]; // Extract the base64 content\n        resolve(base64Content);\n      };\n      reader.onerror = error => {\n        reject(error);\n      };\n\n      // Read the content as base64\n      reader.readAsDataURL(file);\n    });\n  };\n\n  // Function to make a POST request to the Azure Functions endpoint\n  const uploadFiles = async (userId, mediaID, file) => {\n    try {\n      const response = await axios.post('https://functionappuserresumes.azurewebsites.net/api/HttpTrigger1?code=4yHlqEo_Erqm96LWxMTJCxwYPtIfAwSkT2DWm9PY6trBAzFuf6rb3Q==', {\n        userId,\n        mediaID,\n        file: {\n          [getFileType(file)]: {\n            content: await readFileContent(file)\n          }\n        }\n      });\n      console.log('Upload successful:', response.data);\n    } catch (error) {\n      console.error('Error uploading file:', error.message);\n    }\n  };\n\n  // Initialize the dropzone\n  const {\n    getRootProps: mediaRootProps,\n    getInputProps: mediaInputProps,\n    isDragActive: isMediaDragActive\n  } = useDropzone({\n    onDrop\n  });\n\n  // Styling for the dropzone area\n  const dropzoneStyle = {\n    border: '2px dashed #cccccc',\n    borderRadius: '4px',\n    padding: '20px',\n    textAlign: 'center',\n    cursor: 'pointer',\n    margin: '20px 0'\n  };\n\n  // Log when the component renders\n  console.log('MyResume Component Rendered');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Media Upload Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload Your Media (PDF or MP4)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ...mediaRootProps(),\n        style: dropzoneStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...mediaInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), isMediaDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drop the media file here ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag 'n' drop your media file here, or click to select a file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), mediaFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Accepted Media File:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: mediaFile.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(MyResume, \"/IBjgFE8Ujtg+B/3qc4DqM0b8Uc=\", false, function () {\n  return [useAuth, useDropzone];\n});\n_c = MyResume;\nexport default MyResume;\nvar _c;\n$RefreshReg$(_c, \"MyResume\");","map":{"version":3,"names":["React","useCallback","useState","useDropzone","axios","useAuth","v4","uuidv4","jsxDEV","_jsxDEV","MyResume","_s","user","mediaFile","setMediaFile","onDrop","files","mediaID","supportedFile","find","file","getFileType","console","log","userId","id","uploadFiles","extensions","pdf","video","audio","extension","name","split","pop","type","includes","readFileContent","Promise","resolve","reject","reader","FileReader","onload","event","base64Content","target","result","onerror","error","readAsDataURL","response","post","content","data","message","getRootProps","mediaRootProps","getInputProps","mediaInputProps","isDragActive","isMediaDragActive","dropzoneStyle","border","borderRadius","padding","textAlign","cursor","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/kpfb2/repositories/RecruitApp/react-test/src/Pages/MyResume.js"],"sourcesContent":["// Import necessary libraries and components\r\nimport React, { useCallback, useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { v4 as uuidv4 } from 'uuid';  // Import uuidv4 from the 'uuid' library\r\n\r\n// MyResume component\r\nconst MyResume = () => {\r\n  // Use the useAuth hook to get the user object\r\n  const { user } = useAuth();\r\n  const [mediaFile, setMediaFile] = useState(null);\r\n\r\n  // Callback to handle when files are dropped\r\n  const onDrop = useCallback(async (files) => {\r\n    // Generate a UUID for the entire upload session\r\n    const mediaID = uuidv4();\r\n\r\n    // Find the first PDF or MP4 file\r\n    const supportedFile = files.find(file => getFileType(file) === 'pdf' || getFileType(file) === 'video');\r\n\r\n    // Handle the uploaded file\r\n    console.log('Accepted File:', supportedFile);\r\n\r\n    // Set state if a supported file is found\r\n    if (supportedFile) {\r\n      setMediaFile(supportedFile); // Assuming only one supported file is allowed\r\n    }\r\n\r\n    // Use the user ID obtained from the useAuth hook\r\n    const userId = user ? user.id : null;\r\n\r\n    // Make a POST request to the Azure Functions endpoint if user ID is available and a supported file is found\r\n    if (userId && supportedFile) {\r\n      // Pass the generated UUID to the function\r\n      uploadFiles(userId, mediaID, supportedFile);\r\n    }\r\n  }, [user]);\r\n\r\n  // Function to get file type based on extension\r\n  const getFileType = (file) => {\r\n    const extensions = {\r\n      pdf: ['pdf'],\r\n      video: ['mp4', 'mov'],\r\n      audio: ['mp3', 'wav'],\r\n    };\r\n\r\n    const extension = file.name.split('.').pop();\r\n    for (const type in extensions) {\r\n      if (extensions[type].includes(extension)) {\r\n        return type;\r\n      }\r\n    }\r\n    return 'unknown';\r\n  };\r\n\r\n  // Function to read file content as base64\r\n  const readFileContent = async (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const base64Content = event.target.result.split(',')[1]; // Extract the base64 content\r\n        resolve(base64Content);\r\n      };\r\n      reader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n\r\n      // Read the content as base64\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  // Function to make a POST request to the Azure Functions endpoint\r\n  const uploadFiles = async (userId, mediaID, file) => {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://functionappuserresumes.azurewebsites.net/api/HttpTrigger1?code=4yHlqEo_Erqm96LWxMTJCxwYPtIfAwSkT2DWm9PY6trBAzFuf6rb3Q==',\r\n        { userId, mediaID, file: { [getFileType(file)]: { content: await readFileContent(file) } } }\r\n      );\r\n\r\n      console.log('Upload successful:', response.data);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error.message);\r\n    }\r\n  };\r\n\r\n  // Initialize the dropzone\r\n  const { getRootProps: mediaRootProps, getInputProps: mediaInputProps, isDragActive: isMediaDragActive } = useDropzone({ onDrop });\r\n\r\n  // Styling for the dropzone area\r\n  const dropzoneStyle = {\r\n    border: '2px dashed #cccccc',\r\n    borderRadius: '4px',\r\n    padding: '20px',\r\n    textAlign: 'center',\r\n    cursor: 'pointer',\r\n    margin: '20px 0',\r\n  };\r\n\r\n  // Log when the component renders\r\n  console.log('MyResume Component Rendered');\r\n\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Media Upload Page</h1>\r\n\r\n      {/* Media Dropzone area */}\r\n      <div>\r\n        <h2>Upload Your Media (PDF or MP4)</h2>\r\n        <div {...mediaRootProps()} style={dropzoneStyle}>\r\n          <input {...mediaInputProps()} />\r\n          {isMediaDragActive ? (\r\n            <p>Drop the media file here ...</p>\r\n          ) : (\r\n            <p>Drag 'n' drop your media file here, or click to select a file</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {/* Display the accepted media file */}\r\n      {mediaFile && (\r\n        <div>\r\n          <h3>Accepted Media File:</h3>\r\n          <p>{mediaFile.name}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyResume;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAE;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAM;IAAEC;EAAK,CAAC,GAAGP,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMa,MAAM,GAAGd,WAAW,CAAC,MAAOe,KAAK,IAAK;IAC1C;IACA,MAAMC,OAAO,GAAGV,MAAM,CAAC,CAAC;;IAExB;IACA,MAAMW,aAAa,GAAGF,KAAK,CAACG,IAAI,CAACC,IAAI,IAAIC,WAAW,CAACD,IAAI,CAAC,KAAK,KAAK,IAAIC,WAAW,CAACD,IAAI,CAAC,KAAK,OAAO,CAAC;;IAEtG;IACAE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,aAAa,CAAC;;IAE5C;IACA,IAAIA,aAAa,EAAE;MACjBJ,YAAY,CAACI,aAAa,CAAC,CAAC,CAAC;IAC/B;;IAEA;IACA,MAAMM,MAAM,GAAGZ,IAAI,GAAGA,IAAI,CAACa,EAAE,GAAG,IAAI;;IAEpC;IACA,IAAID,MAAM,IAAIN,aAAa,EAAE;MAC3B;MACAQ,WAAW,CAACF,MAAM,EAAEP,OAAO,EAAEC,aAAa,CAAC;IAC7C;EACF,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMS,WAAW,GAAID,IAAI,IAAK;IAC5B,MAAMO,UAAU,GAAG;MACjBC,GAAG,EAAE,CAAC,KAAK,CAAC;MACZC,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;MACrBC,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK;IACtB,CAAC;IAED,MAAMC,SAAS,GAAGX,IAAI,CAACY,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;IAC5C,KAAK,MAAMC,IAAI,IAAIR,UAAU,EAAE;MAC7B,IAAIA,UAAU,CAACQ,IAAI,CAAC,CAACC,QAAQ,CAACL,SAAS,CAAC,EAAE;QACxC,OAAOI,IAAI;MACb;IACF;IACA,OAAO,SAAS;EAClB,CAAC;;EAED;EACA,MAAME,eAAe,GAAG,MAAOjB,IAAI,IAAK;IACtC,OAAO,IAAIkB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;QACzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM,CAACd,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzDM,OAAO,CAACM,aAAa,CAAC;MACxB,CAAC;MACDJ,MAAM,CAACO,OAAO,GAAIC,KAAK,IAAK;QAC1BT,MAAM,CAACS,KAAK,CAAC;MACf,CAAC;;MAED;MACAR,MAAM,CAACS,aAAa,CAAC9B,IAAI,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMM,WAAW,GAAG,MAAAA,CAAOF,MAAM,EAAEP,OAAO,EAAEG,IAAI,KAAK;IACnD,IAAI;MACF,MAAM+B,QAAQ,GAAG,MAAM/C,KAAK,CAACgD,IAAI,CAC/B,iIAAiI,EACjI;QAAE5B,MAAM;QAAEP,OAAO;QAAEG,IAAI,EAAE;UAAE,CAACC,WAAW,CAACD,IAAI,CAAC,GAAG;YAAEiC,OAAO,EAAE,MAAMhB,eAAe,CAACjB,IAAI;UAAE;QAAE;MAAE,CAC7F,CAAC;MAEDE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE4B,QAAQ,CAACG,IAAI,CAAC;IAClD,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd3B,OAAO,CAAC2B,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACM,OAAO,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAM;IAAEC,YAAY,EAAEC,cAAc;IAAEC,aAAa,EAAEC,eAAe;IAAEC,YAAY,EAAEC;EAAkB,CAAC,GAAG1D,WAAW,CAAC;IAAEY;EAAO,CAAC,CAAC;;EAEjI;EACA,MAAM+C,aAAa,GAAG;IACpBC,MAAM,EAAE,oBAAoB;IAC5BC,YAAY,EAAE,KAAK;IACnBC,OAAO,EAAE,MAAM;IACfC,SAAS,EAAE,QAAQ;IACnBC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACV,CAAC;;EAED;EACA9C,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAE1C,oBACEd,OAAA;IAAA4D,QAAA,gBACE5D,OAAA;MAAA4D,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGrChE,OAAA;MAAA4D,QAAA,gBACE5D,OAAA;QAAA4D,QAAA,EAAI;MAA8B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvChE,OAAA;QAAA,GAASgD,cAAc,CAAC,CAAC;QAAEiB,KAAK,EAAEZ,aAAc;QAAAO,QAAA,gBAC9C5D,OAAA;UAAA,GAAWkD,eAAe,CAAC;QAAC;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EAC/BZ,iBAAiB,gBAChBpD,OAAA;UAAA4D,QAAA,EAAG;QAA4B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,gBAEnChE,OAAA;UAAA4D,QAAA,EAAG;QAA6D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CACpE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEL5D,SAAS,iBACRJ,OAAA;MAAA4D,QAAA,gBACE5D,OAAA;QAAA4D,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BhE,OAAA;QAAA4D,QAAA,EAAIxD,SAAS,CAACmB;MAAI;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9D,EAAA,CAxHID,QAAQ;EAAA,QAEKL,OAAO,EA8EkFF,WAAW;AAAA;AAAAwE,EAAA,GAhFjHjE,QAAQ;AA0Hd,eAAeA,QAAQ;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}