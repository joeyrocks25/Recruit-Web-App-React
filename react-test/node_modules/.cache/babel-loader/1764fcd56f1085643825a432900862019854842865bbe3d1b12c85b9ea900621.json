{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kpfb2\\\\repositories\\\\RecruitApp\\\\react-test\\\\src\\\\Pages\\\\MyResume.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and components\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport { useAuth } from '../hooks/useAuth';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuidv4 from the 'uuid' library\n\n// MyResume component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyResume = () => {\n  _s();\n  // Use the useAuth hook to get the user object\n  const {\n    user\n  } = useAuth();\n  const [resume, setResume] = useState(null);\n\n  // Callback to handle when files are dropped\n  const onDrop = useCallback(async files => {\n    // Generate a UUID for the entire upload session\n    const resumeID = uuidv4();\n\n    // Find the first PDF file\n    const pdfFile = files.find(file => getFileType(file) === 'pdf');\n\n    // Handle the uploaded file\n    console.log('Accepted File:', pdfFile);\n\n    // Set state if a PDF file is found\n    if (pdfFile) {\n      setResume(pdfFile); // Assuming only one PDF file is allowed\n    }\n\n    // Use the user ID obtained from the useAuth hook\n    const userId = user ? user.id : null;\n\n    // Make a POST request to the Azure Functions endpoint if user ID is available and a PDF file is found\n    if (userId && pdfFile) {\n      // Pass the generated UUID to the function\n      uploadFiles(userId, resumeID, pdfFile);\n    }\n  }, [user]);\n\n  // Function to get file type based on extension\n  const getFileType = file => {\n    const extensions = {\n      pdf: ['pdf'],\n      video: ['mp4', 'mov'],\n      audio: ['mp3', 'wav']\n    };\n    const extension = file.name.split('.').pop();\n    for (const type in extensions) {\n      if (extensions[type].includes(extension)) {\n        return type;\n      }\n    }\n    return 'unknown';\n  };\n\n  // Function to read file content\n  const readFileContent = async file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        resolve(event.target.result);\n      };\n      reader.onerror = error => {\n        reject(error);\n      };\n\n      // Read different types of content based on file type\n      if (file.type.startsWith('image')) {\n        reader.readAsDataURL(file);\n      } else {\n        reader.readAsArrayBuffer(file);\n      }\n    });\n  };\n\n  // Function to make a POST request to the Azure Functions endpoint\n  const uploadFiles = async (userId, resumeID, file) => {\n    try {\n      const response = await axios.post('https://functionappuserresumes.azurewebsites.net/api/HttpTrigger1?code=4yHlqEo_Erqm96LWxMTJCxwYPtIfAwSkT2DWm9PY6trBAzFuf6rb3Q==', {\n        userId,\n        resumeID,\n        file: {\n          pdf: {\n            content: await readFileContent(file)\n          }\n        }\n      });\n      console.log('Upload successful:', response.data);\n    } catch (error) {\n      console.error('Error uploading file:', error.message);\n    }\n  };\n\n  // Initialize the dropzone\n  const {\n    getRootProps: resumeRootProps,\n    getInputProps: resumeInputProps,\n    isDragActive: isResumeDragActive\n  } = useDropzone({\n    onDrop\n  });\n\n  // Styling for the dropzone area\n  const dropzoneStyle = {\n    border: '2px dashed #cccccc',\n    borderRadius: '4px',\n    padding: '20px',\n    textAlign: 'center',\n    cursor: 'pointer',\n    margin: '20px 0'\n  };\n\n  // Log when the component renders\n  console.log('MyResume Component Rendered');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Media Upload Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload Your Resume (PDF)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ...resumeRootProps(),\n        style: dropzoneStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...resumeInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), isResumeDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drop the resume here ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag 'n' drop your resume here, or click to select a file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), resume && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Accepted Resume:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: resume.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(MyResume, \"nIft6uOMzpoQBFOziZsouqrxCjQ=\", false, function () {\n  return [useAuth, useDropzone];\n});\n_c = MyResume;\nexport default MyResume;\nvar _c;\n$RefreshReg$(_c, \"MyResume\");","map":{"version":3,"names":["React","useCallback","useState","useDropzone","axios","useAuth","v4","uuidv4","jsxDEV","_jsxDEV","MyResume","_s","user","resume","setResume","onDrop","files","resumeID","pdfFile","find","file","getFileType","console","log","userId","id","uploadFiles","extensions","pdf","video","audio","extension","name","split","pop","type","includes","readFileContent","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","error","startsWith","readAsDataURL","readAsArrayBuffer","response","post","content","data","message","getRootProps","resumeRootProps","getInputProps","resumeInputProps","isDragActive","isResumeDragActive","dropzoneStyle","border","borderRadius","padding","textAlign","cursor","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/kpfb2/repositories/RecruitApp/react-test/src/Pages/MyResume.js"],"sourcesContent":["// Import necessary libraries and components\r\nimport React, { useCallback, useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { v4 as uuidv4 } from 'uuid';  // Import uuidv4 from the 'uuid' library\r\n\r\n// MyResume component\r\nconst MyResume = () => {\r\n  // Use the useAuth hook to get the user object\r\n  const { user } = useAuth();\r\n  const [resume, setResume] = useState(null);\r\n\r\n  // Callback to handle when files are dropped\r\n  const onDrop = useCallback(async (files) => {\r\n    // Generate a UUID for the entire upload session\r\n    const resumeID = uuidv4();\r\n\r\n    // Find the first PDF file\r\n    const pdfFile = files.find(file => getFileType(file) === 'pdf');\r\n\r\n    // Handle the uploaded file\r\n    console.log('Accepted File:', pdfFile);\r\n\r\n    // Set state if a PDF file is found\r\n    if (pdfFile) {\r\n      setResume(pdfFile); // Assuming only one PDF file is allowed\r\n    }\r\n\r\n    // Use the user ID obtained from the useAuth hook\r\n    const userId = user ? user.id : null;\r\n\r\n    // Make a POST request to the Azure Functions endpoint if user ID is available and a PDF file is found\r\n    if (userId && pdfFile) {\r\n      // Pass the generated UUID to the function\r\n      uploadFiles(userId, resumeID, pdfFile);\r\n    }\r\n  }, [user]);\r\n\r\n  // Function to get file type based on extension\r\n  const getFileType = (file) => {\r\n    const extensions = {\r\n      pdf: ['pdf'],\r\n      video: ['mp4', 'mov'],\r\n      audio: ['mp3', 'wav'],\r\n    };\r\n\r\n    const extension = file.name.split('.').pop();\r\n    for (const type in extensions) {\r\n      if (extensions[type].includes(extension)) {\r\n        return type;\r\n      }\r\n    }\r\n    return 'unknown';\r\n  };\r\n\r\n  // Function to read file content\r\n  const readFileContent = async (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        resolve(event.target.result);\r\n      };\r\n      reader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n\r\n      // Read different types of content based on file type\r\n      if (file.type.startsWith('image')) {\r\n        reader.readAsDataURL(file);\r\n      } else {\r\n        reader.readAsArrayBuffer(file);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Function to make a POST request to the Azure Functions endpoint\r\n  const uploadFiles = async (userId, resumeID, file) => {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://functionappuserresumes.azurewebsites.net/api/HttpTrigger1?code=4yHlqEo_Erqm96LWxMTJCxwYPtIfAwSkT2DWm9PY6trBAzFuf6rb3Q==',\r\n        { userId, resumeID, file: { pdf: { content: await readFileContent(file) } } }\r\n      );\r\n\r\n      console.log('Upload successful:', response.data);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error.message);\r\n    }\r\n  };\r\n\r\n  // Initialize the dropzone\r\n  const { getRootProps: resumeRootProps, getInputProps: resumeInputProps, isDragActive: isResumeDragActive } = useDropzone({ onDrop });\r\n\r\n  // Styling for the dropzone area\r\n  const dropzoneStyle = {\r\n    border: '2px dashed #cccccc',\r\n    borderRadius: '4px',\r\n    padding: '20px',\r\n    textAlign: 'center',\r\n    cursor: 'pointer',\r\n    margin: '20px 0',\r\n  };\r\n\r\n  // Log when the component renders\r\n  console.log('MyResume Component Rendered');\r\n\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Media Upload Page</h1>\r\n\r\n      {/* Resume Dropzone area */}\r\n      <div>\r\n        <h2>Upload Your Resume (PDF)</h2>\r\n        <div {...resumeRootProps()} style={dropzoneStyle}>\r\n          <input {...resumeInputProps()} />\r\n          {isResumeDragActive ? (\r\n            <p>Drop the resume here ...</p>\r\n          ) : (\r\n            <p>Drag 'n' drop your resume here, or click to select a file</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {/* Display the accepted resume */}\r\n      {resume && (\r\n        <div>\r\n          <h3>Accepted Resume:</h3>\r\n          <p>{resume.name}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyResume;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}